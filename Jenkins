pipeline {
    agent any

    tools {
        maven 'maven' // Use the Maven tool installed in Jenkins
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-hub-token' // ID of the Jenkins credential for Docker Hub token
        SONAR_TOKEN = credentials('sonarqube-token') // Use the ID of your SonarQube token credential
    }                            

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/NeelRavalt/Microservice_wineapp.git'
            }
        }

        stage('Build') {
            steps {
                bat 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQube') { // Make sure 'SonarQube' matches the name configured in Jenkins
                        bat """
                            mvn sonar:sonar -Dsonar.projectKey=your_project_key \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t wineapp:latest .' // Build the Docker image
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Use Jenkins Credentials to securely log in to Docker Hub
                    withCredentials([string(credentialsId: DOCKER_CREDENTIALS_ID)]) {
                        bat """
                            echo %DOCKER_TOKEN% | docker login -u nraval --password-stdin
                            docker tag wineapp:latest nraval/wineapp:latest // Tag the image
                            docker push nraval/wineapp:latest // Push the image to Docker Hub
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                bat 'kubectl apply -f k8s/deployment.yaml' // Deploy to Kubernetes
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
